
An email I sent proposing an SOA Vision at work:



------------------
As most of you know I've been spending a lot of time lately studying how other companies are managing their SOAs.  Netflix and Amazon in particular.  See these links:

(Jeff Bezo's Big Mandate) http://www.infoworld.com/t/service-oriented-architecture/ex-amazonian-urges-google-sample-amazons-secret-sauce-175906
(Netflix) http://www.infoq.com/interviews/Adrian-Cockcroft-Netflix


Although Bezo's "Big Mandate" seems pretty harsh and draconian, it did inspire me to try to cobble together the ideas from these misc sources into a somewhat cohesive whole.  The result is the proposed "SOA Vision Strawman" below.  I'm not proposing this as a short term state but rather a long term state to strive for.


SOA Vision Strawman

1.  Team interaction - Teams interact with other teams via service interfaces.  Same as the Amazon email.  Not through the database, not through secret back doors, but through known published REST interfaces.

2.  Service size - Individual services should be small.  The 500 line limit proposed by some may be too small, but tends toward smaller rather than larger.

3.  Decoupled deployment - Our deployment infrastructure should support deploying service independently.  Example:  If I need to do a bug fix or enhancement to Service A, I should be able to deploy that change without also having able  to re-deploy services B,C,D,E, and F.

4.  No "Release Train" - This is implied by the item above.  Instead of all services and apps marching lock-step together in one giant every growing "Release Train", we instead have a model of lots of smaller independent subway cars, each rapidly making small changes over time.

5.  Source code ownership - Specific teams will own every line of code.  Teams will not share source code.  If there is common code that multiple services need to use, handle that just like any other external library, such as apache commons lang.  I.e.  Build versioned jars and let teams pull the jar and version they want.  Just like any Apache project, it releases new versions on it's own independent schedule, as needed.  Teams decided when/if they need to update their currently used version.

6.  "You build it, you run it" -   Teams own their services.  They own the source code, they control access to that source code, they own deploying the service to all environments including production, they own monitoring, they own fixing production errors, they get paged at 2am if a critical system goes down because of their service.

7.  Team co-location - For a particular service, all team members should be co-located.  (If they can't be co-located, we should either figure out a way to split the service into multiple services with clear non-coupled responsibilities, or have the non-colocated members work on something else.  Optionally, we might want to experiment with building some services via an internal open source model.  Have one or two "commiters" who review and commit all code.  Other team members take small assignments and submit their code to the commiters.  )

8.  Backwards compatibility - As services change over time, they should retain backwards compatibility until all clients can have time to comply with interface changes and/or functionality changes.

9.  Monitoring and health checks - All services should provide monitoring and health checks.  Monitoring and health checks should include business metrics in addition to technical metrics.  Things like "how many users are logging in", "how many reports are being run", "how many searches are being performed", "how many new licenses are being purchased".  If a service change gets deployed and one these metrics subsequently goes the wrong way a short time after that, we either quickly fix the problem or rollback the service change and investigate.

10.  Frequent deployment - Provided they follow the rule of backwards compatibility, teams should be free to deploy changes to their service at any time, with any frequency.  This includes Production.  To support this, we will need to provide infrastructure support for teams to "canary test" . I.e., the ability to deploy the service for either a limited number of users or a limited number of servers.  We will need infrastructure support to rapidly deploy and rollback changes to these services.

11.  SLAs - All services in ALL environments should have SLA's.  This includes Dev, QA, and Staging.  (One of first goals would then be to drastically improve Dev environment SLAs.   Having Dev services be down for 6 hours a day every day will not be acceptable.  I would think having independently deployable services would go a long way towards solving this)

12.  Similar to Amazon and Netflix, within reason, teams should not be required to use specific technologies for bulding and deploying their services.  However, they should be incented to use a specific architecture and technologies by creating patterns and tooling that make the developers life easy if they follow that architecture and use those technologies.  If you use the standard recommended architecture and tools, your life should be easy.  If you want to experiment with something, you are responsible for providing all the support, tooling, etc.  Experimentation is allowed but gets naturally capped by the shear work required to do something non-standard.


As I said, I see this as a long term vision.  A lot of the items on this list don't make sense(and in fact, sound crazy) unless you have very robust supporting mechanisms in place.  For example, one of the pre-cursors to frequent deployment of services would be much better monitoring and health checks than we current have.

One incremental step in this direction could be to pick a specific service that is already quite small and start applying these ideas.